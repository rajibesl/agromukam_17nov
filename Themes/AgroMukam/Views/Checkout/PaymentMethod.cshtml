@model CheckoutPaymentMethodModel
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(T("PageTitle.Checkout").Text);
    //page class
    Html.AppendPageCssClassParts("html-checkout-page");
    Html.AppendPageCssClassParts("html-payment-method-page");
}
<div class="page checkout-page payment-method-page mt-5">
    @*@await Component.InvokeAsync("CheckoutProgress", new { step = CheckoutProgressStep.Payment })*@
    @await Html.PartialAsync("_Checkout.Navigation")

    <div class="page-body checkout-data">

        <div class="container">
            <div class="row">
                <div class="col-lg-8">
                    <div class="card rounded-0">
                        <div class="card-body">
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutPaymentMethodTop })
                            <div class="section payment-method">
                                <form asp-route="CheckoutPaymentMethod" method="post">
                                    @if (Model.DisplayRewardPoints && Model.PaymentMethods.Count > 0)
                                    {
                                        <div class="use-reward-points">
                                            <div class="custom-control custom-checkbox">
                                                <input asp-for="UseRewardPoints" type="checkbox" class="custom-control-input" id="UseRewardPoints" />
                                                <label class="custom-control-label" for="UseRewardPoints" asp-for="UseRewardPoints">@string.Format(T("Checkout.UseRewardPoints").Text, Model.RewardPointsBalance, Model.RewardPointsAmount)</label>
                                            </div>
                                            @if (Model.RewardPointsEnoughToPayForOrder)
                                            {
                                                <script asp-location="Footer">
                                $(document).ready(function() {
                                    $("#@Html.IdFor(model => model.UseRewardPoints)")
                                        .on('change', toggleUseRewardPoints);
                                    toggleUseRewardPoints();
                                });

                                function toggleUseRewardPoints() {
                                    if ($('#@Html.IdFor(model => model.UseRewardPoints)').is(':checked')) {
                                        $('#payment-method-block').hide();
                                    } else {
                                        $('#payment-method-block').show();
                                    }
                                }
                                                </script>
                                            }
                                        </div>
                                    }
                                    @if (Model.PaymentMethods.Count > 0)
                                    {
                                        <ul class="method-list row justify-content-center" id="payment-method-block">
                                            @for (var i = 0; i < Model.PaymentMethods.Count; i++)
                                            {
                                                var paymentMethod = Model.PaymentMethods[i];
                                                var paymentMethodName = paymentMethod.Name;
                                                if (!string.IsNullOrEmpty(paymentMethod.Fee))
                                                {
                                                    paymentMethodName = T("Checkout.SelectPaymentMethod.MethodAndFee", paymentMethodName, paymentMethod.Fee).Text;
                                                }
                                                <li class="col-12 col-sm-12 col-md-4 col-lg-4 col-xl-4">
                                                    <div class="method-name">
                                                        @if (!string.IsNullOrEmpty(paymentMethod.LogoUrl))
                                                        {
                                                            <div class="payment-logo">
                                                                <label for="paymentmethod_@(i)">
                                                                    <img src="@paymentMethod.LogoUrl" alt="@paymentMethodName" class="img-fluid" />
                                                                </label>
                                                            </div>
                                                        }
                                                        <div class="payment-details">
                                                            <div class="custom-control custom-radio">
                                                                <input type="radio" id="paymentmethod_@(i)" name="paymentmethod" value="@(paymentMethod.PaymentMethodSystemName)" class="custom-control-input" checked="@paymentMethod.Selected" />
                                                                <label class="custom-control-label" for="paymentmethod_@(i)">@paymentMethodName</label>
                                                            </div>
                                                            @if (!string.IsNullOrEmpty(paymentMethod.Description))
                                                            {
                                                                <div class="payment-description">@paymentMethod.Description</div>
                                                            }
                                                        </div>
                                                    </div>
                                                </li>
                                            }
                                        </ul>
                                        <div class="buttons">
                                            <input type="submit" name="nextstep" value="@T("Checkout.NextButton")" class="btn btn-success rounded-0 shadow-sm btn-sm payment-method-next-step-button" />
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="message-error">
                                            @T("Checkout.NoPaymentMethods")
                                        </div>
                                    }
                                </form>
                            </div>
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutPaymentMethodBottom })
                        </div>
                    </div>
                </div>
                <div class="col-lg-4">
                    <div class="card border-0 rounded-0 shadow-sm">
                        <div class="card-body">
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryTotals })
                            @await Component.InvokeAsync("OrderTotals", new { isEditable = false })
                        </div>
                    </div>
                </div>
            </div>
        </div>


    </div>
</div>