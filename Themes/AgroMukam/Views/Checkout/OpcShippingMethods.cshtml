@model CheckoutShippingMethodModel
@{
    Context.Items["nop.IgnoreScriptTagLocation"] = true;
}
    <div class="checkout-data">
        @if (Model.DisplayPickupInStore && Model.PickupPointsModel.AllowPickupInStore)
        {
            @await Html.PartialAsync("_PickupPoints", Model.PickupPointsModel)
            <script>
            $(document).ready(function () {
                $(document).unbind('checkout_toggle_pickup_in_store');
                $(document).on('checkout_toggle_pickup_in_store', function (e) {
                    if (e.checked)
                        $('#shipping-methods-form').hide();
                    else
                        $('#shipping-methods-form').show();
                });
            });
            </script>
        }
        @if (Model.PickupPointsModel == null || !Model.PickupPointsModel.PickupInStoreOnly)
        {
            <div class="section shipping-method" id="shipping-methods-form">
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OpCheckoutShippingMethodTop })
                @if (Model.Warnings.Count == 0)
                {
                    <ul class="method-list row justify-content-center">
                        @for (var i = 0; i < Model.ShippingMethods.Count; i++)
                        {
                            var shippingMethod = Model.ShippingMethods[i];
                            <li class="col-12 col-sm-12 col-md-4 col-lg-4 col-xl-4">
                                <div class="method-name">
                                    <div class="custom-control custom-radio">
                                        <input type="radio" id="shippingoption_@(i)" name="shippingoption" value="@(shippingMethod.Name)___@(shippingMethod.ShippingRateComputationMethodSystemName)" class="custom-control-input" checked="@shippingMethod.Selected" />
                                        <label class="custom-control-label" for="shippingoption_@(i)">@T("Checkout.SelectShippingMethod.MethodAndFee", shippingMethod.Name, shippingMethod.Fee)</label>
                                    </div>
                                </div>
                                @if (!string.IsNullOrEmpty(shippingMethod.Description))
                                {
                                    <div class="method-description">
                                        @Html.Raw(shippingMethod.Description)
                                    </div>
                                }
                            </li>
                        }
                    </ul>
                    if (Model.NotifyCustomerAboutShippingFromMultipleLocations)
                    {
                        <div class="multiple-locations">
                            @T("Checkout.ShippingMethod.ShippingFromMultipleLocations")
                        </div>
                    }
                }
                else
                {
                    <div class="message-error">
                        <ul>
                            @foreach (var warning in Model.Warnings)
                            {
                                <li>@warning</li>
                            }
                        </ul>
                    </div>
                }
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OpCheckoutShippingMethodBottom })
            </div>
        }
    </div>
