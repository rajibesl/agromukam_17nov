@model CheckoutShippingMethodModel
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(T("PageTitle.Checkout").Text);
    //page class
    Html.AppendPageCssClassParts("html-checkout-page");
    Html.AppendPageCssClassParts("html-shipping-method-page");
}
<div class="page checkout-page shipping-method-page mt-5">
    @*@await Component.InvokeAsync("CheckoutProgress", new { step = CheckoutProgressStep.Shipping })*@
    @await Html.PartialAsync("_Checkout.Navigation")
    <div class="page-body checkout-data">

        <div class="container">
            <div class="row">
                <div class="col-lg-8">
                    <div class="card rounded-0">
                        <div class="card-body">
                            <div class="section shipping-method">
                                <form asp-route="CheckoutShippingMethod" method="post">
                                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutShippingMethodTop })
                                    @if (Model.DisplayPickupInStore && Model.PickupPointsModel.AllowPickupInStore)
                                    {
                                        @await Html.PartialAsync("_PickupPoints", Model.PickupPointsModel)
                                        <script asp-location="Footer">
                                            $(document).ready(function () {
                                                $(document).on('checkout_toggle_pickup_in_store', function (e) {
                                                    if (e.checked)
                                                        $('.method-list').hide();
                                                    else
                                                        $('.method-list').show();
                                                });
                                            });
                                        </script>
                                    }
                                    @if (Model.PickupPointsModel == null || !Model.PickupPointsModel.PickupInStoreOnly)
                                    {
                                        @if (Model.Warnings.Count == 0)
                                        {
                                            <ul class="method-list row justify-content-center">
                                                @for (var i = 0; i < Model.ShippingMethods.Count; i++)
                                                {
                                                    var shippingMethod = Model.ShippingMethods[i];
                                                    <li class="col-12 col-sm-12 col-md-4 col-lg-4 col-xl-4">
                                                        <div class="method-name">
                                                            <div class="custom-control custom-radio">
                                                                <input type="radio" id="shippingoption_@(i)" name="shippingoption" value="@(shippingMethod.Name)___@(shippingMethod.ShippingRateComputationMethodSystemName)" class="custom-control-input" checked="@shippingMethod.Selected" />
                                                                <label class="custom-control-label" for="shippingoption_@(i)">@T("Checkout.SelectShippingMethod.MethodAndFee", shippingMethod.Name, shippingMethod.Fee)</label>
                                                            </div>
                                                        </div>
                                                        @if (!string.IsNullOrEmpty(shippingMethod.Description))
                                                        {
                                                            <div class="method-description">
                                                                @Html.Raw(shippingMethod.Description)
                                                            </div>
                                                        }
                                                    </li>
                                                }
                                            </ul>
                                            if (Model.NotifyCustomerAboutShippingFromMultipleLocations)
                                            {
                                                <div class="multiple-locations">
                                                    @T("Checkout.ShippingMethod.ShippingFromMultipleLocations")
                                                </div>
                                            }
                                            <div class="buttons">
                                                <input type="submit" name="nextstep" value="@T("Checkout.NextButton")" class="btn btn-success rounded-0 shadow-sm btn-sm shipping-method-next-step-button" />
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="message-error">
                                                <ul>
                                                    @foreach (var warning in Model.Warnings)
                                                    {
                                                        <li>@warning</li>
                                                    }
                                                </ul>
                                            </div>
                                        }
                                    }
                                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutShippingMethodBottom })
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-4">
                    <div class="card border-0 rounded-0 shadow-sm">
                        <div class="card-body">
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryTotals })
                            @await Component.InvokeAsync("OrderTotals", new { isEditable = false })
                        </div>
                    </div>
                </div>
            </div>
        </div>


    </div>
</div>
